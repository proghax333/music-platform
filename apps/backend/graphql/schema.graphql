input SortField {
  field: String
  direction: String
}

type AuthProvider {
  providerId: String!
  provider: String!
  email: String!
  accessToken: String
}

type Profile {
  _id: ObjectId!
  user: User
  name: String!
  avatar: File
  bio: String
  settings: Object
}

type User {
  _id: ObjectId!
  username: String!
  email: String!
  providers: [AuthProvider!]!
  profiles: [Profile!]!

  files(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortField
  ): FileConnection

  createdAt: Date!
  updatedAt: Date!
}

type GreetingMessage {
  id: Int!
  text: String!
}

type Greeting {
  message: GreetingMessage!
}

type File {
  _id: ObjectId!
  name: String!
  size: Int
  type: String
  url: String!
  uploader: User!
  metadata: Object
  active: Boolean
}

type FileEdge {
  node: File
  cursor: String
}

type FileConnection {
  edges: [FileEdge!]
  pageInfo: PageInfo
  totalCount: Int
}

type ProductVariantEdge {
  node: ProductVariant
  cursor: String
}

type ProductVariantConnection {
  edges: [ProductVariantEdge!]
  pageInfo: PageInfo
  totalCount: Int
}

type ProductPostingEdge {
  node: ProductPosting
  cursor: String
}

type ProductPostingConnection {
  edges: [ProductPostingEdge!]
  pageInfo: PageInfo
  totalCount: Int
}

type Category {
  _id: ObjectId
  name: String
  parent: Category

  children: [Category]
}

type Brand {
  _id: ObjectId
  name: String
}

type Feature {
  name: String
  value: String
}

type Product {
  _id: ObjectId!
  name: String!
  description: String!
  images: [File]!
  sku: String
  features: [Feature]!
  price: String!

  brand: Brand
  category: Category

  variants(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortField
  ): ProductVariantConnection

  productPostings(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortField
  ): ProductPostingConnection
}

type ProductVariant {
  _id: ObjectId!
  product: Product
  name: String
  description: String
  type: String
  images: [File]
  sku: String
  features: [Object]
  price: String
}

type ProductPosting {
  _id: ObjectId!
  variant: ProductVariant
  seller: Profile
  price: String!
}

type ProductEdge {
  node: Product
  cursor: String
}

type ProductConnection {
  totalCount: Int
  edges: [ProductEdge!]
  pageInfo: PageInfo
}

type BrandEdge {
  node: Brand
  cursor: String
}

type BrandConnection {
  totalCount: Int
  edges: [BrandEdge!]
  pageInfo: PageInfo
}

type CategoryEdge {
  node: Category
  cursor: String
}

type CategoryConnection {
  totalCount: Int
  edges: [CategoryEdge!]
  pageInfo: PageInfo
}

type Review_resource {
  title: String
  type: String
  file: File
}

type Review {
  _id: ObjectId!
  author: Profile
  refType: String
  refId: ObjectId
  rating: Float!
  resources: [Review_resource!]
  content: String
  createdAt: Date
  updatedAt: Date
}

type ReviewEdge {
  node: Review
  cursor: String
}

type ReviewConnection {
  totalCount: Int
  edges: [ReviewEdge!]
  pageInfo: PageInfo
}

### Course ###

type Course {
  _id: ObjectId!
  title: String!
  description: String!
  instructors: [Profile!]
  images: [ObjectId!]
  published: Boolean
  sections: [Section!]

  createdAt: Date
  updatedAt: Date
}

type Section_item {
  ref: ObjectId
  refType: String
}

type Section {
  title: String!
  course: Course
  items: [Section_item]
  order: Int

  lessons: [Lesson!]

  createdAt: Date
  updatedAt: Date
}

type Lesson_resource {
  title: String
  type: String
  file: File
}

type Lesson {
  title: String
  content: String
  file: File
  resources: [Lesson_resource]

  createdAt: Date
  updatedAt: Date
}

type Quiz_option {
  text: String
  isCorrect: Boolean
}

type Quiz_matchPair {
  left: String
  right: String
}

type Quiz_question {
  type: String
  text: String
  options: [Quiz_option]
  correctAnswers: [String]
  matchPairs: [Quiz_matchPair]
  explanation: String
  points: Int
}

type Quiz {
  _id: ObjectId!
  title: String!
  description: String
  timeLimit: Int
  randomizeQuestions: Boolean
  passingScore: Int
  questions: [Quiz_question]
  course: Course

  createdAt: Date
  updatedAt: Date
}

type QuizAttempt_matchedPair {
  left: String
  right: String
}

type QuizAttempt_answer {
  questionIndex: Int
  selectedOptions: [String]
  writtenAnswer: String
  matchedPairs: [QuizAttempt_matchedPair]
  isCorrect: Boolean
}

type QuizAttempt {
  _id: ObjectId!
  quiz: Quiz!
  user: Profile!
  answers: [QuizAttempt_answer]
  score: Float
  completedAt: Date
  duration: Int

  createdAt: Date
  updatedAt: Date
}

type CartItem {
  _id: ObjectId!
  profile: Profile
  variant: ProductVariant
  quantity: Int!
  total: String!
}

## Task

type Task {
  _id: ID!
  title: String
  difficulty: String
  movie: String
  status: String
  acceptance: String
}

###
# Queries: All GraphQL queries.
###

type Query {
  hello: String!

  message: GreetingMessage!
  greeting(name: String!): Greeting!

  profile(id: ObjectId!): Profile
  me: User

  products(
    first: Int
    last: Int
    before: String
    after: String
    sort: SortField
    filter: Object
  ): ProductConnection

  product(id: ObjectId!): Product
  productVariant(id: ObjectId!): ProductVariant

  brands(
    first: Int
    last: Int
    before: String
    after: String
    sort: SortField
    filter: Object
  ): BrandConnection

  categories(
    first: Int
    last: Int
    before: String
    after: String
    sort: SortField
    filter: Object
  ): CategoryConnection

  allCategories: [Object]

  reviews(
    first: Int
    last: Int
    before: String
    after: String
    sort: SortField

    refId: ObjectId!
  ): ReviewConnection

  review(id: ObjectId!): Review

  cartItems(profile: ObjectId!): [CartItem!]!

  files(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortField
  ): FileConnection

  tasks: [Task!]!
  task(id: ID!): Task
}

########################
#### MUTATION TYPES ####
########################

input LoginMutationInput {
  username: String!
  password: String!
}

type LoginMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  user: User
  accessToken: String
  refreshToken: String
}

type LogoutMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

input RefreshTokenMutationInput {
  refreshToken: String!
}

type RefreshTokenMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  accessToken: String
}

input SignupMutationInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

type SignupMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  user: User
}

input FeatureInput {
  name: String!
  value: String!
}

### Product ###

input CreateProductInput_variants {
  name: String
  description: String
  type: String
  images: [ObjectId!]
  sku: String
  features: [Object]
  price: String
}

input CreateProductInput {
  name: String!
  description: String!
  images: [ObjectId!]
  sku: String
  features: [FeatureInput]!
  price: String!

  brand: ObjectId
  category: ObjectId

  variants: [CreateProductInput_variants!]
}

type CreateProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  product: Product
}

input UpdateProductInput_variants {
  _id: ObjectId
  name: String
  description: String
  type: String
  images: [ObjectId!]
  sku: String
  features: [FeatureInput]
  price: String
}

input UpdateProductInput {
  _id: ObjectId
  name: String
  description: String
  images: [ObjectId!]
  sku: String
  features: [FeatureInput]
  price: String

  variants: [UpdateProductInput_variants!]
}

type UpdateProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  product: Product
}

type DeleteProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### Product Variant ###

input CreateProductVariantInput {
  product: ObjectId!
  name: String
  description: String
  type: String
  images: [ObjectId]
  sku: String
  features: [Object]
  price: String
}

type CreateProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productVariant: ProductVariant
}

input UpdateProductVariantInput {
  _id: ObjectId
  name: String
  description: String
  type: String
  images: [ObjectId]
  sku: String
  features: [Object]
  price: String
}

type UpdateProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productVariant: ProductVariant
}

type DeleteProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### Product Posting ###

input CreateProductPostingInput {
  variant: ObjectId!
  seller: ObjectId!
  price: String!
}

type CreateProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String!
  errors: [String!]

  productPosting: ProductPosting
}

input UpdateProductPostingInput {
  _id: ObjectId
  variant: ObjectId
  seller: ObjectId
  price: String
}

type UpdateProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productPosting: ProductPosting
}

type DeleteProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### Category ###

input CreateCategoryInput {
  name: String
  parent: ObjectId
}

type CreateCategoryResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  category: Category
}

input UpdateCategoryInput {
  _id: ObjectId
  name: String
  parent: ObjectId
}

type UpdateCategoryResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  category: Category
}

type DeleteCategoryResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### Brand ###

input CreateBrandInput {
  name: String
}

type CreateBrandResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  brand: Brand
}

input UpdateBrandInput {
  _id: ObjectId
  name: String
}

type UpdateBrandResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  brand: Brand
}

type DeleteBrandResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### Review ###
input ReviewResourceInput {
  title: String
  type: String
  file: ObjectId
}

input CreateReviewInput {
  author: ObjectId
  refType: String
  refId: ObjectId
  rating: Float!
  content: String
  resources: [ReviewResourceInput!]
}

type CreateReviewResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  review: Review
}

input UpdateReviewInput {
  _id: ObjectId
  rating: Float!
  content: String
  resources: [ReviewResourceInput!]
}

type UpdateReviewResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  review: Review
}

type DeleteReviewResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

#####################
### Course Inputs ###
#####################

input CreateCourseInput {
  title: String!
  description: String
  instructors: [ObjectId!]!
  images: [ObjectId!]
  published: Boolean
  sections: [ObjectId!]
}

type CreateCourseResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  course: Course
}

input UpdateCourseInput {
  _id: ObjectId!
  title: String
  description: String
  instructors: [ObjectId!]
  images: [ObjectId!]
  published: Boolean
  sections: [ObjectId!]
}

type UpdateCourseResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  course: Course
}

type DeleteCourseResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

######################
### Section Inputs ###
######################

input SectionItemInput {
  ref: ObjectId!
  type: String! # Should match ["Lesson", "Quiz"]
}

input CreateSectionInput {
  title: String!
  course: ObjectId!
  items: [SectionItemInput!]
  order: Int!
}

type CreateSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  section: Section
}

input UpdateSectionInput {
  _id: ObjectId!
  title: String
  course: ObjectId
  items: [SectionItemInput!]
  order: Int
}

type UpdateSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  section: Section
}

type DeleteSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

######################
### Section Inputs ###
######################

input SectionItemInput {
  ref: ObjectId!
  type: String! # Allowed: "Lesson", "Quiz"
}

input CreateSectionInput {
  title: String!
  course: ObjectId!
  items: [SectionItemInput!]
  order: Int!
}

type CreateSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  section: Section
}

input UpdateSectionInput {
  _id: ObjectId!
  title: String
  course: ObjectId
  items: [SectionItemInput!]
  order: Int
}

type UpdateSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  section: Section
}

type DeleteSectionResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

#####################
### Lesson Inputs ###
#####################

input LessonResourceInput {
  title: String
  type: String # Should match ["pdf", "link", "image", "file"]
  file: ObjectId
}

input CreateLessonInput {
  course: ObjectId
  title: String!
  content: String
  file: ObjectId!
  resources: [LessonResourceInput]
}

type CreateLessonResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  lesson: Lesson
}

input UpdateLessonInput {
  _id: ObjectId!
  title: String
  content: String
  file: ObjectId
  resources: [LessonResourceInput]
}

type UpdateLessonResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  lesson: Lesson
}

type DeleteLessonResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

###################
### Quiz Inputs ###
###################

input QuizOptionInput {
  text: String
  isCorrect: Boolean
}

input QuizMatchPairInput {
  left: String
  right: String
}

input QuizQuestionInput {
  type: String!
  text: String!
  options: [QuizOptionInput]
  correctAnswers: [String]
  matchPairs: [QuizMatchPairInput]
  explanation: String
  points: Int
}

input CreateQuizInput {
  title: String!
  description: String
  timeLimit: Int
  randomizeQuestions: Boolean
  passingScore: Int
  questions: [QuizQuestionInput]
  course: ObjectId
}

type CreateQuizResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  quiz: Quiz
}

input UpdateQuizInput {
  _id: ObjectId!
  title: String
  description: String
  timeLimit: Int
  randomizeQuestions: Boolean
  passingScore: Int
  questions: [QuizQuestionInput]
  course: ObjectId
}

type UpdateQuizResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  quiz: Quiz
}

type DeleteQuizResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

###########################
### Quiz Attempt Inputs ###
###########################

input QuizAttemptMatchedPairInput {
  left: String
  right: String
}

input QuizAttemptAnswerInput {
  questionIndex: Int
  selectedOptions: [String]
  writtenAnswer: String
  matchedPairs: [QuizAttemptMatchedPairInput]
  isCorrect: Boolean
}

input CreateQuizAttemptInput {
  quiz: ObjectId!
  profile: ObjectId!
  answers: [QuizAttemptAnswerInput]
  score: Float
  completedAt: Date
  duration: Int
}

type CreateQuizAttemptResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  quizAttempt: QuizAttempt
}

input UpdateQuizAttemptInput {
  _id: ObjectId!
  quiz: ObjectId
  profile: ObjectId
  answers: [QuizAttemptAnswerInput]
  score: Float
  completedAt: Date
  duration: Int
}

type UpdateQuizAttemptResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  quizAttempt: QuizAttempt
}

type DeleteQuizAttemptResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

# Cart Item

input CreateCartItemInput {
  profile: ObjectId!
  variant: ObjectId!
  quantity: Int!
}

type CreateCartItemResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  cartItem: CartItem!
}

input UpdateCartItemInput {
  _id: ObjectId
  quantity: Int
}

type UpdateCartItemResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
  cartItem: CartItem
}
type DeleteCartItemResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

# File

input CreateFileInput {
  name: String
  size: Int
  type: String
  url: String!
  metadata: Object
  active: Boolean
}

type CreateFileResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  file: File
}

input UpdateFileInput {
  name: String
  size: Int
  type: String
  url: String
  metadata: Object
  active: Boolean
}

type UpdateFileResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  file: File
}

type DeleteFileResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

#Task

input CreateTaskInput {
  title: String
  movie: String
  status: String
  acceptance: String
  difficulty: String
}

type CreateTaskResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  task: Task
}

input UpdateTaskInput {
  title: String
  movie: String
  status: String
  acceptance: String
  difficulty: String
}

type UpdateTaskResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  task: Task
}

type DeleteTaskResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

### ------ ###

type Mutation {
  login(input: LoginMutationInput!): LoginMutationResponse!
  signup(input: SignupMutationInput!): SignupMutationResponse!
  logout: LogoutMutationResponse!
  refreshToken(input: RefreshTokenMutationInput): RefreshTokenMutationResponse!

  # Product mutations
  createProduct(input: CreateProductInput!): CreateProductResponse!
  updateProduct(input: UpdateProductInput!): UpdateProductResponse!
  deleteProduct(id: ObjectId!): DeleteProductResponse!

  # Product variant mutations
  createProductVariant(
    input: CreateProductVariantInput!
  ): CreateProductVariantResponse!
  updateProductVariant(
    id: ObjectId!
    input: UpdateProductVariantInput!
  ): UpdateProductVariantResponse!
  deleteProductVariant(id: ObjectId!): DeleteProductVariantResponse!

  # Product posting mutations
  createProductPosting(
    input: CreateProductPostingInput!
  ): CreateProductPostingResponse!
  updateProductPosting(
    id: ObjectId!
    input: UpdateProductPostingInput!
  ): UpdateProductPostingResponse!
  deleteProductPosting(id: ObjectId!): DeleteProductPostingResponse!

  # Category mutations
  createCategory(input: CreateCategoryInput!): CreateCategoryResponse!
  updateCategory(
    id: ObjectId!
    input: UpdateCategoryInput!
  ): UpdateCategoryResponse!
  deleteCategory(id: ObjectId!): DeleteCategoryResponse!

  # Brand mutations
  createBrand(input: CreateBrandInput!): CreateBrandResponse!
  updateBrand(id: ObjectId!, input: UpdateBrandInput!): UpdateBrandResponse!
  deleteBrand(id: ObjectId!): DeleteBrandResponse!

  # Review mutations
  createReview(input: CreateReviewInput!): CreateReviewResponse!
  updateReview(id: ObjectId!, input: UpdateReviewInput!): UpdateReviewResponse!
  deleteReview(id: ObjectId!): DeleteReviewResponse!

  # Course mutations
  createCourse(input: CreateCourseInput!): CreateCourseResponse!
  updateCourse(id: ObjectId!, input: UpdateCourseInput!): UpdateCourseResponse!
  deleteCourse(id: ObjectId!): DeleteCourseResponse!

  # Lesson mutations
  createLesson(input: CreateLessonInput!): CreateLessonResponse!
  updateLesson(id: ObjectId!, input: UpdateLessonInput!): UpdateLessonResponse!
  deleteLesson(id: ObjectId!): DeleteLessonResponse!

  # Section mutations
  createSection(input: CreateSectionInput!): CreateSectionResponse!
  updateSection(
    id: ObjectId!
    input: UpdateSectionInput!
  ): UpdateSectionResponse!
  deleteSection(id: ObjectId!): DeleteSectionResponse!

  # Quiz mutations
  createQuiz(input: CreateQuizInput!): CreateQuizResponse!
  updateQuiz(id: ObjectId!, input: UpdateQuizInput!): UpdateQuizResponse!
  deleteQuiz(id: ObjectId!): DeleteQuizResponse!

  # Quiz attempt mutations
  createQuizAttempt(input: CreateQuizAttemptInput!): CreateQuizAttemptResponse!
  updateQuizAttempt(
    id: ObjectId!
    input: UpdateQuizAttemptInput!
  ): UpdateQuizAttemptResponse!
  deleteQuizAttempt(id: ObjectId!): DeleteQuizAttemptResponse!

  # Cart mutations
  createCartItem(input: CreateCartItemInput!): CreateCartItemResponse!
  deleteCartItem(id: ObjectId!): DeleteCartItemResponse!
  updateCartItem(
    id: ObjectId!
    input: UpdateCartItemInput!
  ): UpdateCartItemResponse!

  # File mutations
  createFile(input: CreateFileInput!): CreateFileResponse!
  updateFile(id: ObjectId!, input: UpdateFileInput!): UpdateFileResponse!
  deleteFile(id: ObjectId!): DeleteFileResponse

  # Task Mutation
  createTask(input: CreateTaskInput!): CreateTaskResponse!
  updateTask(id: ObjectId!, input: UpdateTaskInput!): UpdateTaskResponse!
  deleteTask(id: ObjectId!): DeleteTaskResponse!
}

"""
The specification includes the pagination metadata
in a common type.
"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

scalar Date
scalar Object
scalar JSON
scalar ObjectId
